// 这里建立一个28*28的roadMap数组而不是建立一个26*26的主要因为子弹的问题
// 子弹图片只有8*8，而坦克是32*32，如果还是用26*26的数组去判断，子弹运动到边界路劲数组就不够用了
let roadMap = new Array(28),
	aHomePosi = [[11, 5], [11, 6], [11, 7], [12, 5], [12, 7]],  // 老家周围一圈砖块的位置
	aHomeData = [[20, 9, 19, 8, 10],                            // 老家周围钢筋的地图数据
				 [18, 4, 17, 3, 5]];                            // 砖块的地图数据

// 画地图
class DrawMap{
	constructor(){
		this.iData;      // 当前需要绘制的一个地图格子的数据
	}

	/**
	 * [渲染地图并确定路径数据]
	 * @param  {[number]} num [当前需要绘制的关卡数]
	 */
	draw(num){
		draw.map = false;
		// 初始化地图数据
		for (let i = 0; i < 28; i++) {
			roadMap[i] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
		}
		// 自定义地图后必须清空坦克出现位置的砖块，防止玩家在这些地方定义砖块把路堵住了
		if (!num) {
			mapData[0][0][0] =
			mapData[0][0][6] =
			mapData[0][0][12] =
			mapData[0][12][4] = 0;
		}
		// 绘制地图
		for (let i = 0; i < 13; i++) {
			for(let j = 0; j < 13; j++){
				this.iData = mapData[num][i][j];
				if (this.iData) {
					cxt.bg.drawImage(oImg.brick, 32 * this.iData, 0, 32, 32, 35+32*j, 20+32*i, 32, 32);
					// 根据地图数据确定路径数据
					this.road(i, j, this.iData);
				}
			}
		}
	}

	// roadMap值的意义：
 	// 0 ：无障碍
 	// 1 ：砖块
 	// 2 ：钢筋
 	// 3: 冰路
 	// 4: 河流
 	// 5: 老家
	/**
	 * 确定路径数组
	 * @param  {number} i         行
	 * @param  {number} j         列
	 * @param  {number} iData     地图数据
	 */
	road(i, j, iData){
		switch (iData) {
			// 1、2、3、4、5、17、18都表示砖块
			case 1:
				roadMap[2*i][2*j] =
				roadMap[2*i][2*j+1] =
				roadMap[2*i+1][2*j] =
				roadMap[2*i+1][2*j+1] = 1;
				break;
			case 2:
				roadMap[2*i][2*j] =
				roadMap[2*i][2*j+1] = 1;
				break;
			case 3:
				roadMap[2*i][2*j+1] =
				roadMap[2*i+1][2*j+1] = 1;
				// 将砖块状态清空，主要是在吃了钢锹奖励后需要重置老家周围一圈砖块的状态
				// 下面的4、5、17、18同此
				oBrickStatus[(2*i)*28+(2*j+1)] = null;
				oBrickStatus[(2*i+1)*28+(2*j+1)] = null;
				break;
			case 4:
				roadMap[2*i+1][2*j] =
				roadMap[2*i+1][2*j+1] = 1;
				oBrickStatus[(2*i+1)*28+(2*j)] = null;
				oBrickStatus[(2*i+1)*28+(2*j+1)] = null;
				break;
			case 5:
				roadMap[2*i][2*j] =
				roadMap[2*i+1][2*j] = 1;
				oBrickStatus[(2*i)*28+(2*j)] = null;
				oBrickStatus[(2*i+1)*28+(2*j)] = null;
				break;
			case 17:
				roadMap[2*i+1][2*j] = 1;
				oBrickStatus[(2*i+1)*28+(2*j)] = null;
				break;
			case 18:
				roadMap[2*i+1][2*j+1] = 1;
				oBrickStatus[(2*i+1)*28+(2*j+1)] = null;
				break;
			// 6、7、8、9、10、19、20都表示钢筋
			case 6:
				roadMap[2*i][2*j] =
				roadMap[2*i][2*j+1] =
				roadMap[2*i+1][2*j] =
				roadMap[2*i+1][2*j+1] = 2;
				break;
			case 7:
				roadMap[2*i][2*j] =
				roadMap[2*i][2*j+1] = 2;
				break;
			case 8:
				roadMap[2*i][2*j+1] =
				roadMap[2*i+1][2*j+1] = 2;
				break;
			case 9:
				roadMap[2*i+1][2*j] =
				roadMap[2*i+1][2*j+1] = 2;
				break;
			case 10:
				roadMap[2*i][2*j] =
				roadMap[2*i+1][2*j] = 2;
				break;
			case 19:
				roadMap[2*i+1][2*j] = 2;
				break;
			case 20:
				roadMap[2*i+1][2*j+1] = 2;
				break;
			// 13表河流，坦克无法越过，但是子弹可以过去
			case 13:
				roadMap[2*i][2*j] =
				roadMap[2*i][2*j+1] =
				roadMap[2*i+1][2*j] =
				roadMap[2*i+1][2*j+1] = 4;
				break;

			// 15表老家，全部无法通过，子弹打上去game over
			case 15:
				roadMap[2*i][2*j] =
				roadMap[2*i][2*j+1] =
				roadMap[2*i+1][2*j] =
				roadMap[2*i+1][2*j+1] = 5;
				break;
			// 12表冰块，坦克在冰块上面移动速度加快，出现次数最少，放最下面了
			case 12:
				roadMap[2*i][2*j] =
				roadMap[2*i][2*j+1] =
				roadMap[2*i+1][2*j] =
				roadMap[2*i+1][2*j+1] = 3;
				break;
			default:
				break;
		}
	}
}

let mapData = [
	// 第一关
	[
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
		[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
		[0, 1, 0, 1, 0, 1, 6, 1, 0, 1, 0, 1, 0],
		[0, 1, 0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 0],
		[0, 2, 0, 2, 0, 4, 0, 4, 0, 2, 0, 2, 0],
		[4, 0, 4, 4, 0, 2, 0, 2, 0, 4, 4, 0, 4],
		[7, 0, 2, 2, 0, 4, 0, 4, 0, 2, 2, 0, 7],
		[0, 4, 0, 4, 0, 1, 1, 1, 0, 4, 0, 4, 0],
		[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
		[0, 1, 0, 1, 0, 2, 0, 2, 0, 1, 0, 1, 0],
		[0, 1, 0, 1, 0, 18, 4, 17, 0, 1, 0, 1, 0],
		[0, 0, 0, 0, 0, 3, 15, 5, 0, 0, 0, 0, 0]
	],

	// 第二关
	[
		[0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0],
		[0, 1, 0, 6, 0, 0, 0, 1, 0, 1, 0, 1, 0],
		[0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 6, 1, 0],
		[0, 0, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 0],
		[11, 0, 0, 1, 0, 0, 6, 0, 0, 1, 11, 1, 6],
		[11, 11, 0, 0, 0, 1, 0, 0, 6, 0, 11, 0, 0],
		[0, 1, 1, 1, 11, 11, 11, 6, 0, 0, 11, 1, 0],
		[0, 0, 0, 6, 11, 1, 0, 1, 0, 1, 0, 1, 0],
		[6, 1, 0, 6, 0, 1, 0, 1, 0, 1, 6, 1, 0],
		[0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 6, 1, 0],
		[0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0],
		[0, 1, 0, 0, 0, 18, 4, 17, 0, 1, 0, 1, 0],
		[0, 1, 0, 1, 0, 3, 15, 5, 0, 1, 1, 1, 0]
	],

	// 第三关
	[
  		[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
  		[0, 11, 11, 11, 1, 0, 0, 0, 0, 0, 9, 9, 9],
  		[1, 11, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  		[11, 11, 11, 11, 0, 0, 0, 1, 0, 1, 1, 1, 5],
  		[11, 11, 11, 11, 1, 1, 1, 2, 0, 1, 0, 3, 0],
  		[11, 11, 11, 11, 0, 0, 1, 0, 0, 0, 0, 3, 0],
  		[0, 11, 0, 0, 0, 0, 6, 6, 6, 0, 0, 11, 0],
  		[0, 4, 0, 4, 0, 0, 0, 0, 0, 11, 11, 11, 11],
  		[1, 5, 3, 1, 5, 3, 2, 2, 2, 11, 11, 11, 11],
  		[0, 0, 0, 0, 0, 1, 0, 4, 4, 11, 11, 11, 11],
  		[1, 0, 0, 10, 0, 0, 0, 2, 2, 11, 11, 11, 0],
  		[1, 1, 0, 10, 0, 18, 4, 17, 0, 11, 11, 11, 0],
  		[6, 1, 1, 0, 0, 3, 15, 5, 0, 1, 0, 0, 0]
	],

	// 第四关
	[
		[0, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0],
		[11, 11, 0, 0, 4, 1, 1, 4, 4, 0, 0, 0, 11],
		[11, 0, 0, 3, 1, 1, 1, 1, 1, 1, 4, 0, 7],
		[7, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0],
		[0, 0, 3, 2, 0, 0, 0, 2, 1, 1, 0, 5, 0],
		[13, 0, 3, 0, 10, 0, 10, 0, 1, 5, 0, 0, 0],
		[0, 0, 1, 0, 4, 4, 0, 0, 1, 5, 0, 13, 13],
		[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
		[0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0, 0],
		[0, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0],
		[0, 1, 1, 4, 2, 1, 1, 2, 4, 1, 1, 0, 11],
		[11, 0, 2, 2, 0, 18, 4, 17, 2, 2, 0, 11, 11],
		[6, 11, 0, 0, 0, 3, 15, 5, 0, 0, 11, 11, 6]
	],

	// 第五关
	[
		[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
		[9, 0, 4, 0, 1, 0, 0, 0, 7, 7, 6, 0, 0],
		[6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
		[1, 0, 1, 1, 1, 0, 1, 1, 0, 13, 13, 0, 13],
		[2, 0, 0, 0, 2, 0, 0, 0, 0, 13, 0, 0, 0],
		[0, 0, 4, 0, 13, 13, 0, 13, 13, 13, 0, 1, 1],
		[1, 1, 0, 0, 13, 1, 0, 1, 5, 0, 0, 0, 0],
		[0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 8, 10, 0],
		[13, 13, 13, 0, 13, 0, 6, 0, 1, 0, 8, 0, 0],
		[0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 8, 1, 1],
		[0, 0, 0, 0, 1, 2, 2, 2, 1, 4, 0, 0, 0],
		[1, 1, 2, 0, 0, 18, 4, 17, 0, 2, 1, 0, 0],
		[2, 0, 0, 0, 0, 3, 15, 5, 0, 0, 0, 0, 0]
	],

	// 第六关
	[
		[0, 0, 0, 0, 0, 3, 0, 5, 11, 11, 0, 0, 0],
		[0, 5, 8, 0, 5, 0, 0, 0, 3, 11, 5, 3, 11],
		[0, 5, 8, 0, 5, 0, 1, 0, 3, 11, 5, 3, 11],
		[0, 1, 0, 0, 1, 0, 6, 0, 1, 11, 0, 1, 11],
		[0, 0, 0, 3, 7, 0, 1, 0, 2, 10, 0, 11, 11],
		[1, 1, 5, 0, 0, 11, 1, 11, 0, 0, 3, 1, 1],
		[0, 0, 0, 0, 3, 11, 11, 11, 5, 0, 0, 0, 0],
		[6, 1, 1, 0, 2, 11, 11, 11, 2, 3, 1, 1, 6],
		[7, 7, 7, 0, 4, 0, 11, 0, 4, 0, 7, 7, 7],
		[0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
		[0, 1, 5, 0, 0, 2, 0, 2, 0, 0, 0, 0, 11],
		[0, 0, 2, 0, 0, 18, 4, 17, 0, 0, 11, 11, 11],
		[0, 0, 4, 0, 0, 3, 15, 5, 0, 0, 4, 11, 11]
	],

	// 第七关
	[
		[0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0],
		[0, 0, 6, 7, 7, 7, 0, 0, 0, 0, 6, 0, 0],
		[0, 0, 6, 0, 0, 0, 11, 0, 7, 6, 6, 0, 0],
		[0, 6, 0, 0, 0, 11, 6, 0, 0, 0, 6, 0, 0],
		[0, 0, 0, 0, 11, 6, 6, 0, 0, 0, 7, 6, 0],
		[0, 6, 0, 11, 6, 6, 6, 0, 6, 0, 0, 0, 0],
		[0, 8, 0, 6, 6, 0, 0, 0, 6, 6, 0, 0, 0],
		[10, 0, 0, 0, 6, 0, 6, 6, 6, 0, 0, 8, 0],
		[0, 8, 6, 0, 0, 0, 6, 6, 11, 0, 0, 6, 0],
		[0, 6, 0, 0, 0, 0, 6, 11, 0, 0, 6, 6, 0],
		[0, 7, 7, 6, 0, 0, 11, 0, 0, 6, 0, 0, 0],
		[0, 0, 0, 0, 0, 18, 4, 17, 0, 7, 0, 9, 6],
		[9, 9, 0, 0, 0, 3, 15, 5, 0, 0, 0, 0, 0]
	],

	// 第八关
	[
		[0, 0, 1, 0, 0, 1, 0, 4, 0, 1, 0, 0, 0],
		[11, 1, 1, 1, 0, 1, 0, 9, 0, 1, 5, 0, 0],
		[11, 11, 11, 0, 0, 2, 0, 1, 0, 2, 0, 3, 5],
		[11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 0, 13],
		[0, 1, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0],
		[0, 0, 1, 0, 0, 3, 1, 1, 2, 1, 2, 7, 7],
		[1, 1, 0, 1, 0, 3, 1, 1, 11, 1, 9, 9, 1],
		[0, 0, 0, 6, 0, 9, 0, 11, 11, 11, 11, 0, 0],
		[13, 13, 0, 13, 13, 13, 13, 13, 0, 13, 13, 13, 13],
		[11, 11, 0, 3, 0, 0, 4, 4, 0, 0, 0, 0, 0],
		[11, 11, 1, 0, 3, 0, 0, 3, 0, 9, 4, 1, 0],
		[11, 9, 1, 0, 3, 18, 4, 17, 0, 2, 0, 1, 0],
		[0, 0, 0, 0, 0, 3, 15, 5, 0, 4, 0, 2, 0]
	],

	// 第九关
	[
		[0, 0, 0, 1, 0, 0, 0, 0, 0, 9, 11, 0, 0],
		[1, 0, 0, 0, 0, 0, 9, 11, 8, 6, 10, 0, 1],
		[0, 0, 0, 9, 11, 8, 6, 10, 0, 7, 0, 0, 0],
		[0, 0, 8, 6, 10, 0, 7, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 7, 11, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 11, 9, 11, 0, 11, 9, 11, 0, 0, 0],
		[6, 1, 0, 8, 6, 10, 0, 8, 6, 10, 0, 1, 6],
		[0, 0, 0, 11, 7, 11, 0, 11, 7, 11, 0, 0, 0],
		[0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 0],
		[1, 0, 0, 8, 6, 10, 0, 8, 6, 10, 0, 0, 1],
		[1, 0, 0, 11, 7, 11, 0, 11, 7, 11, 0, 0, 1],
		[0, 0, 4, 0, 0, 18, 4, 17, 0, 0, 4, 0, 0],
		[0, 0, 1, 1, 0, 3, 15, 5, 0, 1, 1, 0, 0]
	],

	// 第十关
	[
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 3, 2, 1, 0, 0, 0, 0, 0, 0, 1, 2, 5],
		[3, 2, 0, 0, 1, 0, 11, 11, 0, 1, 0, 0, 3],
		[1, 0, 0, 0, 1, 11, 11, 11, 11, 1, 0, 0, 3],
		[1, 0, 0, 3, 1, 11, 6, 6, 11, 1, 5, 0, 1],
		[3, 4, 4, 1, 13, 13, 13, 13, 13, 13, 1, 1, 1],
		[0, 1, 1, 1, 6, 6, 1, 6, 6, 1, 1, 1, 5],
		[0, 0, 1, 1, 6, 0, 1, 0, 6, 1, 1, 5, 0],
		[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0],
		[1, 11, 2, 2, 2, 6, 6, 2, 2, 2, 2, 11, 1],
		[1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1],
		[0, 0, 11, 11, 11, 18, 4, 17, 11, 11, 11, 11, 0],
		[0, 0, 0, 5, 0, 3, 15, 5, 0, 0, 5, 0, 0]
	],

	// 地图模版，不会用到
	[
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 18, 4, 17, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 3, 15, 5, 0, 0, 0, 0, 0]
	]
]

let setMapInit = true;

// 设置地图
class MapEditor{
	constructor(){
		this.x = 0;
		this.y = 0;

		this.setMapData = new Array(13);
		for (let i = 0; i < 13; i++) {
			this.setMapData[i] = new Array(13);
		}
		this.setMapData[12][6] = 15;         // 设置老家的砖块

		this.ensureMap = true;

		this.drawTankAble = true;     // 是否需要重绘坦克

		this.brickNum = 0;    // 砖块改变的计数
		this.brickNumSave = false;

		this.move = new Array(87);
		this.tankMove();
	}

	tankMove(){
		// 上
		this.move[87] = () => {
			this.y > 0 ? this.y -= 32 : this.y;
		}
		// 下
		this.move[83] = () => {
			this.y < 384 ? this.y += 32 : this.y;
		};
		// 左
		this.move[65] = () => {
			this.x > 0 ? this.x -= 32 : this.x;
		};
		// 右
		this.move[68] = () => {
			this.x < 384 ? this.x += 32 : this.x;
		};
	}

	key(){
		// 上下左右被按下
		if (keyDir_1 && keyInfo[keyDir_1].pressed) {
			this.move[keyDir_1]();
			if (this.brickNumSave) {
				this.brickNum --;
				this.brickNumSave = false;
			}
		}
		// 更换地形(J键)
		if (keyCode === 74) {
			if (this.x === 192 && this.y === 384) {
				keyPressed = false;
				return;
			}
			this.brickNum < 13 ? this.brickNum ++ : this.brickNum = 0;
			this.brickNumSave = true;
			cxt.bg.clearRect(35 + this.x, 20 + this.y, 32, 32);
			cxt.bg.drawImage(oImg.brick, 32*this.brickNum, 0, 32, 32, 35 + this.x, 20 + this.y, 32, 32);
			this.setMapData[this.y/32][this.x/32] = this.brickNum;
		}
		// 确认地图完成（H键）
		if (keyCode === 72) {
			mapData[0] = this.setMapData;
			draw.setMap = false;
			draw.ui = true;
			canRol.style.zIndex = '';
			gameBox.border.style.backgroundColor = '';
			cxt.bg.clearRect(0, 0, cxt.w, cxt.h);
			cxt.role.clearRect(this.x, this.y, 32, 32);
			this.ensureMap = false;
			ui.status = 0;
			ui.moveToTop = false;
		}
		keyPressed = false;
	}

	draw(){
		// 初始化相关设置
		if (setMapInit) {
			setMapInit = false;
			canRol.style.zIndex = '1';
			gameBox.border.style.backgroundColor = '#666';
			cxt.bg.clearRect(0, 0, cxt.w, cxt.h);
			for (let i = 0; i < 13; i++) {
				for(let j = 0; j < 13; j++){
					this.setMapData[i][j] && cxt.bg.drawImage(oImg.brick, 32 * this.setMapData[i][j], 0, 32, 32, 35+32*j, 20+32*i, 32, 32);
				}
			}
			this.ensureMap = true;
		}
		cxt.role.clearRect(this.x, this.y, 32, 32);
		// 如果有按键被按下
		if (keyPressed) {
			this.key();
		}
		this.ensureMap && cxt.role.drawImage(oImg.myTank, 0, 0, 32, 32, this.x, this.y, 32, 32);
	}
}

// 敌军剩余数目
function enemyNum() {
	let x = 0, y = 0;
	for (let i = 0; i < oEnemy.maxNum; i++) {
		if (i % 2) {
			x ++;
		} else {
			x --;
			y ++;
		}
		cxt.bg.drawImage(oImg.misc, 0, 16, 16, 16, 481+x*18, 20+y*18, 16, 16);
	}
};

// 己方生命数及关卡数
function myInfo() {
	cxt.bg.clearRect(463, 280, 53, 110);
	cxt.bg.fillText("1P", 463, 295);
	cxt.bg.fillText(oPlayer.iLife, 483, 315);
	cxt.bg.drawImage(oImg.misc, 16, 16, 16, 16, 463, 300, 16, 16);
	cxt.bg.drawImage(oImg.misc, 128, 0, 32, 32, 463, 350, 32, 32);
	cxt.bg.fillText(stage.num, 483, 390);
}

// 游戏控制
let keyPressed = false,            // 是否有按键被按下
	keyInfo = new Array(88),
	keyCode = null,
	keyDir_1 = 87,
	keyDir_2 = null;

// 按键松开
let iKeyUp,
	oKeyUp = {
	h: true,
	j: true
};

/**
 * 键盘事件函数
 */
function keyInit() {
	// 给所有需要用到的按键添加表示是否被按下的属性
	let aKey = [72, 74, 87, 83, 65, 68, 38, 40, 37, 39, 17],
		len = aKey.length;

	for (let i = 0; i < len; i++) {
		keyInfo[aKey[i]] = {
			pressed: false
		}
	}
	// 添加角色1和角色2的上右下左属性
	keyInfo[87].dir = keyInfo[38].dir = 0;
	keyInfo[68].dir = keyInfo[39].dir = 1;
	keyInfo[83].dir = keyInfo[40].dir = 2;
	keyInfo[65].dir = keyInfo[37].dir = 3;

	// 事件绑定
	addEventListener('keydown', function (ev) {
		keyCode = ev.keyCode;
		// 如果不是对象则表明不是所需要的按键被按下，而所需要的值已经在setKeyInfo函数中设置了
		if (typeof keyInfo[keyCode] === 'object') {
			// 当按键一直被按住的时候不会一直执行
			if (!keyInfo[keyCode].pressed) {
				if (keyCode === 87 || keyCode === 83 || keyCode === 65 || keyCode === 68) {
					keyDir_1 = keyCode;
				}
				// 如果在游戏中按下H键那么就是暂停或者开始
				if ((keyCode === 72) && ui.bInGame && oKeyUp.h) {
					oKeyUp.h = false;
					if (!draw.ui) {
						ui.status = 3;
						draw.ui = true;
						draw.obj = false;
						draw.bullet = false;
					} else {
						cxt.misc.clearRect(170, 220, 150, 20);
						draw.ui = false;
						draw.obj = true;
						draw.bullet = true;
					}
					oAud.pause.play();
				}
				keyInfo[keyCode].pressed = true;
			}
			keyPressed = true;
		}
	}, false);

	addEventListener('keyup', function (ev) {
		iKeyUp = ev.keyCode;
		if (typeof keyInfo[iKeyUp] === 'object') {
			// 如果H键跟J键松开，那么将oKeyUp中对应的属性置为真
			(iKeyUp === 72) && (oKeyUp.h = true);
			(iKeyUp === 74) && (oKeyUp.j = true);
			keyInfo[iKeyUp].pressed = false;
		}
	}, false);
}

// drawMap：1
// mapData: 154
// MapEditor: 344
// misc: 448
// key: 472
// 
